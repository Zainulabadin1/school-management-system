# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AdminDto {
  name: String!
  email: String!
  password: String!
}

type CreateAdminResponseDto {
  code: Float!
  message: String!
  data: AdminDto
}

type TeacherDto {
  _id: String!
  name: String!
  email: String!
  password: String!
  contactNumber: Float!
  gender: String!
  religion: String!
  dob: DateTime!
  age: Float!
  address: String!
  employeeId: String!
  salary: Float!
  joiningDate: DateTime!
  isTeacher: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CreateTeacherResponseDto {
  code: Float!
  message: String!
  data: TeacherDto
}

type StudentDto {
  _id: String!
  name: String!
  email: String!
  password: String!
  gender: String!
  religion: String!
  dob: DateTime!
  age: String!
  address: String!
  rollNumber: Float!
  class: Float!
  section: String!
  isStudent: Boolean!
  joiningDate: DateTime!
  parentId: ID!
}

type CreateStudentResponseDto {
  code: Float!
  message: String!
  data: StudentDto
}

type AccountantDto {
  _id: String!
  name: String!
  email: String!
  password: String!
  contactNumber: Float!
  gender: String!
  religion: String!
  dob: DateTime!
  age: Float!
  address: String!
  employeeId: String!
  salary: Float!
  joiningDate: DateTime!
  isAccountant: Boolean!
}

type CreateAccountantResponseDto {
  code: Float!
  message: String!
  data: AccountantDto
}

type SubjectDto {
  _id: String!
  name: String!
  subjectCode: String!
}

type CreateSubjectResponseDto {
  code: Float!
  message: String!
  data: SubjectDto
}

type TimetableDto {
  teacherId: ID!
  day: String!
  slot: String!
  class: String!
  subject: ID!
  roomNo: Float!
}

type CreateTimetableResponseDto {
  code: Float!
  message: String!
  data: TimetableDto
}

type ParentDto {
  _id: String!
  name: String!
  email: String!
  password: String!
  gender: String!
  contactNumber: Float!
}

type CreateParentResponseDto {
  code: Float!
  message: String!
  data: ParentDto
}

type UpdateAccountantResponseDto {
  code: Float!
  message: String!
  data: AccountantDto
}

type UpdateAdminResponseDto {
  code: Float!
  message: String!
  data: AdminDto
}

type UpdateParentResponseDto {
  code: Float!
  message: String!
  data: ParentDto
}

type UpdateStudentResponseDto {
  code: Float!
  message: String!
  data: StudentDto
}

type UpdateSubjectResponseDto {
  code: Float!
  message: String!
  data: SubjectDto
}

type UpdateTeacherResponseDto {
  code: Float!
  message: String!
  data: TeacherDto
}

type UpdateTimetableResponseDto {
  code: Float!
  message: String!
  data: TimetableDto
}

type loginAdminResponseDto {
  code: Float!
  message: String!
}

type loginTeacherResponseDto {
  code: Float!
  message: String!
}

type TeacherAttendanceDto {
  teacherId: ID!
  isPresent: Boolean!
  date: DateTime
}

type MarkTeacherAttendanceResponseDto {
  code: Float!
  message: String!
  data: TeacherAttendanceDto
}

type StuAttendanceDto {
  studentId: ID!
  isPresent: Boolean!
  date: DateTime
}

type MarkStudentAttendanceResponseDto {
  code: Float!
  message: String!
  data: StuAttendanceDto
}

type ViewStudentAttendanceResponseDto {
  code: Float!
  message: String!
  data: [StuAttendanceDto!]
}

type ViewTeacherAttendanceResponseDto {
  code: Float!
  message: String!
  data: [TeacherAttendanceDto!]
}

type AssignmentDto {
  studentId: ID!
  assignmentNumber: Float!
  totalMarks: Float!
  isSubmitted: Boolean!
  obtainedMarks: Float!
  class: Float!
  subject: ID!
}

type AssignmentMarksResponseDto {
  code: Float!
  message: String!
  data: AssignmentDto
}

type QuizzesDto {
  studentId: ID!
  quizNumber: Float!
  totalMarks: Float!
  isSubmitted: Boolean!
  obtainedMarks: Float!
  class: Float!
  subject: ID!
}

type QuizMarksResponseDto {
  code: Float!
  message: String!
  data: QuizzesDto
}

type UpdateAssignmentMarksResponseDto {
  code: Float!
  message: String!
  data: AssignmentDto
}

type UpdateQuizMarksResponseDto {
  code: Float!
  message: String!
  data: QuizzesDto
}

type loginStudentResponseDto {
  code: Float!
  message: String!
}

type loginAccountantResponseDto {
  code: Float!
  message: String!
}

type FeesDto {
  studentId: ID!
  monthlyFee: Float!
  Concession: Float!
  isPaid: Boolean!
  amountPaid: Float!
  date: DateTime!
}

type EnterFeeResponseDto {
  code: Float!
  message: String!
  data: FeesDto
}

type SalaryDto {
  name: String!
  teacherID: ID!
  employeeId: String!
  salary: Float!
  fine: Float!
  payingDate: DateTime
  isPaid: Boolean
  amountPaid: Float
}

type EnterSalaryResponseDto {
  code: Float!
  message: String!
  data: SalaryDto
}

type ExpensesDto {
  expenseDetail: String!
  payingDate: DateTime
  amountPaid: Float!
}

type EnterExpenseResponseDto {
  code: Float!
  message: String!
  data: ExpensesDto
}

type UpdateFeeRecordResponseDto {
  code: Float!
  message: String!
  data: FeesDto
}

type UpdateSalaryRecordResponseDto {
  code: Float!
  message: String!
  data: SalaryDto
}

type UpdateExpensesResponseDto {
  code: Float!
  message: String!
  data: ExpensesDto
}

type ViewFeeRecordResponseDto {
  code: Float!
  message: String!
  data: [FeesDto!]
}

type totalFeeCollectedResponseDto {
  code: Float!
  message: String!
  totalFeePaid: Float
}

type totalExpensesResponseDto {
  code: Float!
  message: String!
  totalExpenses: Float
}

type totalSalariesResponseDto {
  code: Float!
  message: String!
  totalSalariesPaid: Float
}

type loginParentResponseDto {
  code: Float!
  message: String!
}

type Query {
  admin: [CreateAdminResponseDto!]!
  viewStuAttendance: ViewStudentAttendanceResponseDto!
  viewTeacherAttendance: ViewTeacherAttendanceResponseDto!
  viewFee: ViewFeeRecordResponseDto!
  viewStudentFee(viewSingleFeeRecord: ViewFeeRecordInput!): ViewFeeRecordResponseDto!
  totalFeeCollected: totalFeeCollectedResponseDto!
  totalExpensesCollected: totalExpensesResponseDto!
  totalSalaries: totalSalariesResponseDto!
}

input ViewFeeRecordInput {
  _id: ID
  studentId: ID
  monthlyFee: Float
  Concession: Float
  isPaid: Boolean
  amountPaid: Float
  date: DateTime
}

type Mutation {
  createAdmin(createAdminInput: CreateAdminInput!): CreateAdminResponseDto!
  createTeacher(createTeacherInput: CreateTeacherInput!): CreateTeacherResponseDto!
  createStudent(createStudentInput: CreateStudentInput!): CreateStudentResponseDto!
  createParent(input: createParentInput!): CreateParentResponseDto!
  createAccountant(createAccountantInput: CreateAccountantInput!): CreateAccountantResponseDto!
  createSubject(createSubjectInput: CreateSubjectInput!): CreateSubjectResponseDto!
  createTimetable(createTimetableInput: CreateTimetableInput!): CreateTimetableResponseDto!
  loginAdmin(loginAdminInput: LoginAdminInput!): loginAdminResponseDto!
  updateAccountant(updateAccountantInput: UpdateAccountantInput!): UpdateAccountantResponseDto!
  updateAdmin(updateAdminInput: UpdateAdminInput!): UpdateAdminResponseDto!
  updateParent(updateParentInput: UpdateParentInput!): UpdateParentResponseDto!
  updateStudent(updateStudentInput: UpdateStudentInput!): UpdateStudentResponseDto!
  updateSubject(updateSubjectInput: UpdateSubjectInput!): UpdateSubjectResponseDto!
  updateTeacher(updateTeacherInput: UpdateTeacherInput!): UpdateTeacherResponseDto!
  updateTimetable(updateTimetableInput: UpdateTimetableInput!): UpdateTimetableResponseDto!
  loginTeacher(loginTeacherInput: LoginTeacherInput!): loginTeacherResponseDto!
  teacherAttendance(teacherAttendanceInput: markTeacherAttendanceInput!): MarkTeacherAttendanceResponseDto!
  studentAttendance(studentAttendanceInput: markStudentAttendanceInput!): MarkStudentAttendanceResponseDto!
  enterAssignmentMarks(assignmentMarksInput: AssignmentMarksInput!): AssignmentMarksResponseDto!
  updateAssignmentMarks(updateAssignmentMarksInput: UpdateAssignmentMarksInput!): UpdateAssignmentMarksResponseDto!
  enterQuizMarks(quizMarksInput: QuizMarksInput!): QuizMarksResponseDto!
  updateQuizMarks(updateQuizMarksInput: UpdateQuizMarksInput!): UpdateQuizMarksResponseDto!
  loginStudent(loginStudentInput: LoginStudentInput!): loginStudentResponseDto!
  loginAccountant(loginAccountantInput: LoginAccountantInput!): loginAccountantResponseDto!
  enterFee(enterFeeInput: EnterFeeInput!): EnterFeeResponseDto!
  updateFeeRecord(updateFeeRecordInput: UpdateFeeRecordInput!): UpdateFeeRecordResponseDto!
  enterSalary(enterSalaryInput: EnterSalaryInput!): EnterSalaryResponseDto!
  updateSalaryRecord(updateSalaryInput: UpdateSalaryRecordInput!): UpdateSalaryRecordResponseDto!
  enterExpense(enterExpenseInput: EnterExpenseInput!): EnterExpenseResponseDto!
  updateExpenses(updateExpenseInput: UpdateExpensesInput!): UpdateExpensesResponseDto!
  loginParent(loginParentInput: LoginParentInput!): loginParentResponseDto!
}

input CreateAdminInput {
  name: String!
  email: String!
  password: String!
}

input CreateTeacherInput {
  name: String!
  email: String!
  password: String!
  contactNumber: Float!
  gender: String!
  religion: String!
  dob: DateTime!
  age: Float
  address: String!
  employeeId: String!
  salary: Float!
  joiningDate: DateTime
  isTeacher: Boolean
}

input CreateStudentInput {
  name: String!
  email: String!
  password: String!
  gender: String!
  religion: String!
  dob: DateTime!
  age: Float
  address: String!
  rollNumber: Float!
  class: Float!
  section: String!
  isStudent: Boolean
  joiningDate: DateTime
  parentId: ID
}

input createParentInput {
  name: String!
  email: String!
  password: String!
  gender: String!
  contactNumber: Float!
}

input CreateAccountantInput {
  name: String!
  email: String!
  password: String!
  contactNumber: Float!
  gender: String!
  religion: String!
  dob: DateTime!
  age: Float
  address: String!
  employeeId: String!
  salary: Float!
  joiningDate: DateTime
  isAccountant: Boolean
}

input CreateSubjectInput {
  name: String!
  subjectCode: String!
}

input CreateTimetableInput {
  teacherId: ID!
  day: String!
  slot: String!
  class: String!
  subject: ID!
  roomNo: Float!
}

input LoginAdminInput {
  email: String!
  password: String!
}

input UpdateAccountantInput {
  _id: ID!
  name: String
  email: String
  password: String
  contactNumber: Float
  gender: String
  religion: String
  dob: DateTime
  age: Float
  address: String
  employeeId: String
  salary: Float
  joiningDate: DateTime
  isAccountant: Boolean
}

input UpdateAdminInput {
  _id: ID!
  name: String
  email: String
  password: String
}

input UpdateParentInput {
  _id: ID!
  name: String
  email: String
  password: String
  gender: String
  contactNumber: Float
}

input UpdateStudentInput {
  _id: ID!
  name: String
  email: String
  password: String
  gender: String
  religion: String
  dob: DateTime
  age: Float
  address: String
  rollNumber: Float
  class: Float
  section: String
  isStudent: Boolean
  joiningDate: DateTime
  parentId: ID
}

input UpdateSubjectInput {
  _id: ID!
  name: String
  subjectCode: String
}

input UpdateTeacherInput {
  _id: ID!
  name: String
  email: String
  password: String
  contactNumber: Float
  gender: String
  religion: String
  dob: DateTime
  age: Float
  address: String
  employeeId: String
  salary: Float
  isTeacher: Boolean
}

input UpdateTimetableInput {
  _id: ID!
  teacherId: ID
  day: String
  slot: String
  class: String
  subject: ID
  roomNo: Float
}

input LoginTeacherInput {
  email: String!
  password: String!
}

input markTeacherAttendanceInput {
  teacherId: ID!
  isPresent: Boolean!
  date: DateTime
}

input markStudentAttendanceInput {
  studentId: ID!
  isPresent: Boolean!
  date: DateTime
}

input AssignmentMarksInput {
  studentId: ID!
  assignmentNumber: Float!
  totalMarks: Float!
  isSubmitted: Boolean!
  obtainedMarks: Float!
  class: Float!
  subject: ID!
}

input UpdateAssignmentMarksInput {
  _id: ID!
  studentId: ID
  assignmentNumber: Float
  totalMarks: Float
  isSubmitted: Boolean
  obtainedMarks: Float
  class: Float
  subject: ID
}

input QuizMarksInput {
  studentId: ID!
  quizNumber: Float!
  totalMarks: Float!
  isSubmitted: Boolean!
  obtainedMarks: Float!
  class: Float!
  subject: ID!
}

input UpdateQuizMarksInput {
  _id: ID!
  studentId: ID!
  quizNumber: Float
  totalMarks: Float
  isSubmitted: Boolean
  obtainedMarks: Float
  class: Float
  subject: ID
}

input LoginStudentInput {
  email: String!
  password: String!
}

input LoginAccountantInput {
  email: String!
  password: String!
}

input EnterFeeInput {
  studentId: ID!
  monthlyFee: Float!
  Concession: Float!
  isPaid: Boolean!
  amountPaid: Float
  date: DateTime
}

input UpdateFeeRecordInput {
  _id: ID!
  studentId: ID
  monthlyFee: Float
  Concession: Float
  isPaid: Boolean
  amountPaid: Float
  date: DateTime
}

input EnterSalaryInput {
  name: String!
  teacherID: ID!
  employeeId: String!
  salary: Float!
  fine: Float!
  payingDate: DateTime
  isPaid: Boolean
  amountPaid: Float
}

input UpdateSalaryRecordInput {
  _id: ID!
  name: String
  teacherID: ID
  employeeId: String
  salary: Float
  fine: Float
  payingDate: DateTime
  isPaid: Boolean
  amountPaid: Float
}

input EnterExpenseInput {
  expenseDetail: String!
  payingDate: DateTime
  amountPaid: Float!
}

input UpdateExpensesInput {
  _id: ID!
  expenseDetail: String
  payingDate: DateTime
  amountPaid: Float
}

input LoginParentInput {
  email: String!
  password: String!
}
